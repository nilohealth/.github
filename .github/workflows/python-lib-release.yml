name: Github CI

on:
  workflow_call:
    inputs:
      python_version:
        required: false
        type: string
        default: '3.11.x'
    secrets:
      gcp_artifact_password:
        required: true
      gh_token:
        required: true


jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{inputs.python_version}}
          cache: poetry
      - name: Install release dependencies
        run: make setup
      - name: Detect version upgrade
        id: versioning
        run: |
          package_version=$(poetry version -s)
          echo "package_version=$package_version" >> $GITHUB_OUTPUT
          upgraded=$(git tag --list | grep -q "${package_version}$" && echo "false" || echo "true")
          echo "upgraded=$upgraded" >> $GITHUB_OUTPUT
          pre_release=$([[ $package_version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && echo "false" || echo "true")
          echo "pre_release=$pre_release" >> $GITHUB_OUTPUT
          pypi_env=$([[ $pre_release =~ "true" ]] && echo "dev" || echo "prd")
          echo "pypi_env=$pypi_env" >> $GITHUB_OUTPUT
          main_branch_release=$([[ $pre_release =~ "false" && $GITHUB_REF_NAME =~ "main" ]] && echo "true" || echo "false")
          alternative_branch_release=$([[ $pre_release =~ "true" && $GITHUB_REF_NAME != "main" ]] && echo "true" || echo "false")
          should_release=$([[ $upgraded =~ "true" && ($main_branch_release =~ "true" || $alternative_branch_release =~ "true") ]] && echo "true" || echo "false")
          echo "should_release=$should_release" >> $GITHUB_OUTPUT
          echo "main_branch_release=$main_branch_release"
          echo "alternative_branch_release=$alternative_branch_release"
          echo "should_release=$should_release"
      - name: Create Release
        if: ${{ steps.versioning.outputs.should_release == 'true' }}
        run: gh release create ${{ steps.versioning.outputs.package_version }} --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
      - name: Build & Publish package
        if: ${{ steps.versioning.outputs.should_release == 'true' }}
        run: |
          poetry config repositories.nilo https://us-east1-python.pkg.dev/nilo-${{ steps.versioning.outputs.pypi_env }}/python-libs
          poetry config http-basic.nilo _json_key_base64 ${{ secrets.gcp_artifact_password }}
          poetry publish --build -r nilo
        env:
          PYTHON_KEYRING_BACKEND: keyring.backends.null.Keyring
